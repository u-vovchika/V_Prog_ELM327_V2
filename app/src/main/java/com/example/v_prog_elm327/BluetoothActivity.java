package com.example.v_prog_elm327;

import static android.service.controls.actions.ControlAction.isValidResponse;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Bundle;

import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.RequiresPermission;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;


public class BluetoothActivity extends AppCompatActivity {
    private static final int REQUEST_ENABLE_BT = 1;
    private static final int REQUEST_PERMISSIONS = 2;
    private static final int REQUEST_BLUETOOTH_SCAN = 3;
    private static final int REQUEST_BLUETOOTH_CONNECT = 4;
    private static final int REQUEST_LOCATION = 5;
    private BluetoothAdapter bluetoothAdapter;
    private BluetoothSocket bluetoothSocket;
    private OutputStream outputStream;
    private InputStream inputStream;
    private ArrayAdapter<String> devicesAdapter;
    private ArrayList<String> devicesList = new ArrayList<>();
    private ArrayList<BluetoothDevice> discoveredDevices = new ArrayList<>();

    // UUID –¥–ª—è SPP (Serial Port Profile)
    private static final UUID MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
//    private static final String[] MAC_ADAPTER = {
//            "78:DB:2F:F7:9B:4A",  // MAC-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ß–ï–†–ù–´–ô –ê–î–ê–ü–¢–ï–†–ê vLinker MC
//            "00:1D:A5:05:EE:47", // MAC-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Kingbolen
//            "66:1E:11:8D:ED:7D", // MAC-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ö–†–ê–°–ù–û–ì–û –ê–î–ê–ü–¢–ï–†–ê
//            "66:1E:11:8D:FC:E9", // MAC-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ö–†–ê–°–ù–û–ì–û –ê–î–ê–ü–¢–ï–†–ê –æ—Ç –†–∏—à–∞—Ç–∞
//            "00:1D:A5:68:98:8A", // MAC-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–∏–Ω–∏–Ω–µ–≥–æ –ê–î–ê–ü–¢–ï–†–ê
//            "00:1D:A5:00:0B:A1"  // MAC-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ë–û–õ–¨–®–û–ô –ß–ï–†–ù–´–ô –ê–î–ê–ü–¢–ï–†–ê
//    };
//    private static final String DEVICE_ADDRESS = MAC_ADAPTER[0]; // MAC-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Kingbolen

    private BluetoothDevice selectedDevice; // –í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    private final List<BluetoothDevice> availableDevices = new ArrayList<>();

    private Button btnDataECU, btnIdenECU, btnReadDTC, btnClearDTC;
    private ListView logListView;
    private TextView receivedDataPower;
    private ArrayAdapter<String> logAdapter;
    private ArrayList<String> logMessages = new ArrayList<>();
    private Handler handler = new Handler(Looper.getMainLooper());
    ImageView imageBluetooth;

    @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_bluetooth);

        logListView = findViewById(R.id.logListView);
        logAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, logMessages);
        logListView.setAdapter(logAdapter);
        btnDataECU = findViewById(R.id.btnDataECU);
        btnIdenECU = findViewById(R.id.btnIdenECU);
        btnReadDTC = findViewById(R.id.btnReadDTC);
        btnClearDTC = findViewById(R.id.btnClearDTC);
        logListView = findViewById(R.id.logListView);
        receivedDataPower = findViewById(R.id.receivedDataPower);
        imageBluetooth = findViewById(R.id.imageBluetooth);


        btnDataECU.setTextColor(Color.GRAY);
        ((ArrayAdapter) logListView.getAdapter()).clear();

        // –ü–æ–ª—É—á–∞–µ–º Bluetooth –∞–¥–∞–ø—Ç–µ—Ä
        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        imageBluetooth.setColorFilter(Color.GRAY);

        /// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Bluetooth /////////////////////////////
        discoverBluetoothDevices();
        receivedDataPower.setOnClickListener(v -> discoverBluetoothDevices());

        receivedDataPower.setText("");
        /// –∫–Ω–æ–ø–∫–∞ —á—Ç–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–æ–≤ ECU
        btnIdenECU.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                addLog("üîç Ident ECU ...");
                readIden();
            }
        });

        /// –∫–Ω–æ–ø–∫–∞ —á—Ç–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
        btnReadDTC.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                addLog("üîç Read DTC ...");
                readDtc();
            }
        });

        /// –∫–Ω–æ–ø–∫–∞  —Å—Ç–∏—Ä–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        btnClearDTC.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                addLog("üßπ Erase DTC ...");
                clearDTC();
            }
        });

        /// /–∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫ ECU
        btnDataECU.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ((ArrayAdapter) logListView.getAdapter()).clear();
                //addLog("üîç Connect ECU ...");
                sendCommand("01421\r", response17 -> {  /// Clear DTC
                    readKm();
                });
            }
        });

    }


    private void scanECU() {
        ((ArrayAdapter) logListView.getAdapter()).clear();
        sendCommand("ATE0\r", responseATE0 -> { /// –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç—Ö–æ
            sendCommand("ATI\r", responseATI -> { /// –≤–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏
                sendCommand("AT@SN\r", responseAT_SN -> { /// –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞:
                    sendCommand("ATRV\r", responseATRV -> { /// –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –Ω–∞ –∞–¥–∞–ø—Ç–µ—Ä–µ
                        sendCommand("ATH1\r", responseATH1 -> { /// –≤–∫–ª-–µ –æ—Ç–æ–±—Ä-—è CAN-—Å–æ–æ–±—â–µ–Ω–∏–π
                            sendCommand("ATSP0\r", responseATSP0 -> { /// –∞–≤—Ç–æ–≤—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                                sendCommand("ATAT1\r", responseATAT1 -> {   /// –≤–∫–ª-–µ —Ç–∞–π–º–∞—É—Ç
                                    sendCommand("ATAL\r", responseATAL -> {  /// /—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                                        sendCommand("ATST64\r", responseATST64 -> {  /// 64 –º—Å –º–∞–∫—Å.–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                                            sendCommand("0100\r", response0100 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs

                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }

    private void clearDTC() {
        ((ArrayAdapter) logListView.getAdapter()).clear();
        sendCommand("0100\r", response12 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs
            sendCommand("ATAR\r", response122 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs
                sendCommand("04\r", response17 -> {  /// Clear DTC

                });
            });
        });
    }

    private void readDtc() {
        ((ArrayAdapter) logListView.getAdapter()).clear();
        sendCommand("0100\r", response12 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs
            sendCommand("ATAR\r", response122 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs
                addLog("\uD83D\uDD0D –¢–µ–∫—É—â–∏–µ –æ—à–∏–±–∫–∏");
                sendCommand("03\r", response17 -> {  /// –¢–µ–∫—É—â–∏–µ –æ—à–∏–±–∫–∏
                    addLog("\uD83D\uDD0D –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏");
                    sendCommand("07\r", response18 -> {  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                        addLog("\uD83D\uDD0D –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏");
                        sendCommand("0A\r", response19 -> {  /// –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏

                        });
                    });
                });
            });
        });

    }

    private void readIden() {
        ((ArrayAdapter) logListView.getAdapter()).clear();
        sendCommand("0100\r", response12 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs
            sendCommand("ATDP\r", response122 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs
                sendCommand("0900\r", response13 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs
                    sendCommand("0902\r", response14 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs
                        sendCommand("0904\r", response15 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs
                            sendCommand("0906\r", response16 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs
                                sendCommand("1A90\r", response17 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs
                                    sendCommand("1A97\r", response1A97 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs
                                        sendCommand("1A71\r", response1A71 -> {  /// –ó–∞–ø—Ä–æ—Å PIDs

                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }

    /// –°–µ—Ä–≤–∏—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ú86
    private void servRec() {
        sendCommand("ATSP6\r", responseATSP -> { // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª CAN 11bit 500k
            sendCommand("ATH1\r", responseATH -> { // –í–ö–õ–Æ–ß–ò–¢–¨ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω
                sendCommand("ATCM7E8\r", responseCM -> {   // Set Mask - –º–∞—Å–∫–∞
                    sendCommand("ATCF7E8\r", responseATCRA5E8 -> {  /// Set Filter - —Ñ–∏–ª—å
                        sendCommand("ATSH7E0\r", responseATSH7E0 -> {  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                            sendCommand("220001\r", responseAA031A -> {  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞

                            });
                        });
                    });
                });
            });
        });
    }

    private void readKm() {
        sendCommand("ATSP6\r", responseATSP -> { // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª CAN 11bit 500k
            sendCommand("ATH1\r", responseATH -> { // –í–ö–õ–Æ–ß–ò–¢–¨ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω
                sendCommand("ATCM5E8\r", responseCM -> {   // Set Mask - –º–∞—Å–∫–∞
                    sendCommand("ATCF5E8\r", responseATCRA5E8 -> {  /// Set Filter - —Ñ–∏–ª—å
                        sendCommand("ATSH7E0\r", responseATSH7E0 -> {  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                            sendCommand("AA041A\r", responseAA031A -> {  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞

                            });
                        });
                    });
                });
            });
        });
    }
    /// //////////////////////////////////////////////////////////////////////////////////
    /// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)
    private void discoverBluetoothDevices() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Bluetooth
        if (bluetoothAdapter == null) {
            Toast.makeText(this, "Bluetooth –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", Toast.LENGTH_SHORT).show();
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ Bluetooth
        if (!bluetoothAdapter.isEnabled()) {
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
            return;
        }

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        availableDevices.clear();

        // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        Set<BluetoothDevice> pairedDevices = bluetoothAdapter.getBondedDevices();
        if (pairedDevices.size() > 0) {
            availableDevices.addAll(pairedDevices);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        showDeviceSelectionDialog();
    }

    /// –î–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ /////////////////////////////////////////////////
    /// –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω /////////////////////////////////////////////////////
    @SuppressLint("MissingPermission")
    @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)
    private void showDeviceSelectionDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("–í—ã–±–µ—Ä–∏—Ç–µ ELM327 –∞–¥–∞–ø—Ç–µ—Ä");
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        builder.setCustomTitle(getColoredTitle("Select the ELM327 adapter"));
        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        List<String> deviceNames = new ArrayList<>();
        for (BluetoothDevice device : availableDevices) {
            deviceNames.add(device.getName() + "\n" + device.getAddress());
        }

        // –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (deviceNames.isEmpty()) {
            deviceNames.add("No devices found");
        }

        builder.setItems(deviceNames.toArray(new String[0]), (dialog, which) -> {
            if (availableDevices.size() > which) {
                selectedDevice = availableDevices.get(which);
                connectToELM327(selectedDevice);
            }
        });

        builder.setNegativeButton("Update", (dialog, which) -> {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            startDeviceDiscovery();
        });

        builder.setNeutralButton("Cancel", null);
        //builder.show();

        AlertDialog dialog = builder.create();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –∑–∞—Ç–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫
        dialog.show();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫
        Button negativeButton = dialog.getButton(AlertDialog.BUTTON_NEGATIVE);
        if (negativeButton != null) {
            negativeButton.setTextColor(Color.BLUE);
        }

        Button neutralButton = dialog.getButton(AlertDialog.BUTTON_NEUTRAL);
        if (neutralButton != null) {
            neutralButton.setTextColor(Color.RED);
        }

    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    private TextView getColoredTitle(String title) {
        TextView titleView = new TextView(this);
        titleView.setText(title);
        titleView.setTextColor(Color.BLACK);
        titleView.setTextSize(20);
        titleView.setTypeface(null, Typeface.BOLD);
        titleView.setPadding(50, 50, 50, 50);
        titleView.setGravity(Gravity.CENTER);
        return titleView;
    }

    /// ////////////////////////////////////////////////////////////////////////////////////
    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    @RequiresPermission(Manifest.permission.BLUETOOTH_SCAN)
    private void startDeviceDiscovery() {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º BroadcastReceiver –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
        registerReceiver(discoveryReceiver, filter);

        // –¢–∞–∫–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        filter = new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
        registerReceiver(discoveryReceiver, filter);

        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫
        if (bluetoothAdapter.isDiscovering()) {
            bluetoothAdapter.cancelDiscovery();
        }
        bluetoothAdapter.startDiscovery();
    }

    private final BroadcastReceiver discoveryReceiver = new BroadcastReceiver() {
        @SuppressLint("MissingPermission")
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();

            if (BluetoothDevice.ACTION_FOUND.equals(action)) {
                // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                if (device != null && !availableDevices.contains(device)) {
                    availableDevices.add(device);
                }
            } else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {
                // –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
                unregisterReceiver(this);
                showDeviceSelectionDialog();
            }
        }
    };

    // –ü–µ—Ä–µ–¥–µ–ª–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ELM327
    @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)
    private void connectToELM327(BluetoothDevice device) {
        if (device == null) {
            Toast.makeText(this, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", Toast.LENGTH_SHORT).show();
            return;
        }

        ((ArrayAdapter) logListView.getAdapter()).clear();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        imageBluetooth.setColorFilter(Color.YELLOW);
        imageBluetooth.setImageResource(R.drawable.outline_bluetooth_connected_24);
        receivedDataPower.setText("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
        receivedDataPower.setTextColor(Color.GRAY);

        new Thread(() -> {
            try {
                bluetoothSocket = device.createRfcommSocketToServiceRecord(MY_UUID);
                bluetoothSocket.connect();
                outputStream = bluetoothSocket.getOutputStream();
                inputStream = bluetoothSocket.getInputStream();

                runOnUiThread(() -> {
                    imageBluetooth.setColorFilter(Color.GREEN);
                    imageBluetooth.setImageResource(R.drawable.outline_bluetooth_connected_24);
                    receivedDataPower.setText("Connect");
                    receivedDataPower.setTextColor(Color.YELLOW);
                    Toast.makeText(this, "Connected to " + device.getName(), Toast.LENGTH_SHORT).show();
                });

                Thread.sleep(700);

                // –°–±—Ä–æ—Å –∞–¥–∞–ø—Ç–µ—Ä–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç—Ö–æ
                sendCommand("ATZ\rATE0\r", response -> {
                    Thread.sleep(500);
                    sendCommand("ATE0\r", response2 -> {
                        sendCommand("ATE0\r", response3 -> {
                            sendCommand("STI\r", response4 -> {
                                // addLog(" –ê–¥–∞–ø—Ç–µ—Ä: ");
                                scanECU();
                            });
                        });
                    });
                });

            } catch (Exception e) {
                runOnUiThread(() -> {
                    imageBluetooth.setColorFilter(Color.RED);
                    imageBluetooth.setImageResource(R.drawable.outline_bluetooth_disabled_24);
                    receivedDataPower.setText("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
                    receivedDataPower.setTextColor(Color.RED);
                    btnIdenECU.setTextColor(Color.GRAY);
                    btnDataECU.setTextColor(Color.GRAY);
                    btnReadDTC.setTextColor(Color.GRAY);
                    btnClearDTC.setTextColor(Color.GRAY);
                    btnIdenECU.setCompoundDrawableTintList(ColorStateList.valueOf(Color.GRAY));
                    Toast.makeText(this, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
                Log.e("Bluetooth", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", e);
            }
        }).start();
    }

    /// //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    private String filterResponse(String response) {
        return response.replaceAll("\r", "")
                .replaceAll("\n", " ")
                .replaceAll(">", "")
                .replaceAll("SEARCHING...", "")
                .trim();
    }


    // –ü–∞—Ä—Å–∏–Ω–≥ VIN (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    private String parseVIN(String response) {
        try {
            String[] parts = response.split("4900");
            if (parts.length < 2) return "Invalid format";

            String hexData = parts[1].replaceAll(" ", "");
            if (hexData.length() < 64) return "Incomplete data";

            StringBuilder vin = new StringBuilder();
            for (int i = 0; i < 64; i += 2) {
                String hex = hexData.substring(i, i + 2);
                vin.append((char) Integer.parseInt(hex, 16));
            }
            return vin.toString().trim();
        } catch (Exception e) {
            return "VIN parse error: " + e.getMessage();
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    private void checkSupportedServices() {
        sendCommand("0100", response -> {
            String filtered = filterResponse(response);
            addLog("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ PIDs 01-20: " + filtered);

            if (isValidResponse(filtered, "4100")) {
                parseSupportedPIDs(filtered);
                requestVehicleInfo();
            } else {
                addLog("–û—à–∏–±–∫–∞: ECU –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ PIDs");
            }
        });
    }

    // –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    private void requestVehicleInfo() {
        sendCommand("0900", response -> {
            String filtered = filterResponse(response);
            addLog("–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: " + filtered);

            if (filtered.contains("4900")) {
                String vin = parseVIN(filtered);
                addLog("VIN: " + vin);
            }

            sendCommand("0902", response2 -> {
                String ecuInfo = filterResponse(response2);
                addLog("ECU ID: " + ecuInfo);
                parseECUInfo(ecuInfo);
            });
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    private boolean isValidResponse(String response, String expectedPrefix) {
        return response.startsWith(expectedPrefix);
    }

    private void showToast(String message) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
    }

    interface ResponseCallback {
        void onResponse(String response) throws InterruptedException;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö PIDs
    private void parseSupportedPIDs(String response) {
        String[] parts = response.split(" ");
        if (parts.length >= 6) {
            long pidMask = Long.parseLong(parts[2] + parts[3] + parts[4] + parts[5], 16);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –±–∏—Ç–æ–≤–æ–π –º–∞—Å–∫–∏
        }
    }

    private String convertHexToAscii(String hexStr) {
        try {
            byte[] bytes = new byte[hexStr.length() / 2];
            for (int i = 0; i < bytes.length; i++) {
                int index = i * 2;
                bytes[i] = (byte) Integer.parseInt(hexStr.substring(index, index + 2), 16);
            }
            return new String(bytes, "UTF-8"); // –∏–ª–∏ "ISO-8859-1"
        } catch (Exception e) {
            return hexStr; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }

    private String extractVinFromResponse(String responseStr) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–ø–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        String clean = responseStr.replaceAll("\\s+", "");

        // –ò–∑–≤–ª–µ–∫–∞–µ–º HEX –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ASCII
        String hexData = clean.replace("7EB", "");

        return convertHexToAscii(hexData);
        //return convertHexToAscii(clean);
    }


    private StringBuilder vinBuilder = new StringBuilder();

    @SuppressLint({"UseCompatTextViewDrawableApis", "SetTextI18n"})
    private void sendCommand(String command, ResponseCallback callback) {
        if (outputStream == null) {
            showToast("‚ùå No connection!");
            return;
        }
        // –°–æ–∑–¥–∞–µ–º Handler –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if (handler == null) {
            handler = new Handler(Looper.getMainLooper());
        }
        new Thread(() -> {
            // –ü–æ–ª—É—á–∞–µ–º drawable –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            final Drawable[] leftDrawable = {btnIdenECU.getCompoundDrawables()[0]};
            if (leftDrawable[0] == null) {
                leftDrawable[0] = ContextCompat.getDrawable(this, R.drawable.outline_check_circle_unread_24);
            }
            try {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
                outputStream.write((command + "\r").getBytes());
                outputStream.flush();
                // –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                StringBuilder response = new StringBuilder();
                byte[] buffer = new byte[1024];
                int bytes;

                // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–∞—É—Ç)
                Thread.sleep(500); // –î–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç
                while (inputStream.available() > 0) {
                    bytes = inputStream.read(buffer);
                    response.append(new String(buffer, 0, bytes));
                }

                final String responseStr = response.toString().trim();
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º handler –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                handler.post(() -> {
//                    addLog(">> " + command);
//                    addLog("<< " + responseStr);

                    filterResponse(responseStr);
                    String[] words = responseStr.split("\r");
                    // receivedDataTextView.setText(words[0]);

                    /// –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–∞–ø—Ç–æ—Ä–µ –ø—Ä–∏ –∫–æ–Ω–Ω–µ–∫—Ç–µ —Å –∞–¥–∞–ø—Ç–µ—Ä–æ–º
                    if (command.startsWith("STI")) {

                        if (responseStr.contains(">")) {
                            receivedDataPower.setText("Connect");
                            receivedDataPower.setTextColor(Color.GREEN);
                            Toast.makeText(this, "‚úÖ Adapter connect !!!", Toast.LENGTH_SHORT).show();
                        } else {
                            receivedDataPower.setText("No Connect");
                            receivedDataPower.setTextColor(Color.GRAY);
                            addLog("‚ùå No Connect ELM327" + responseStr);
                        }
                        //receivedDataTextView.setText(words[0]);
                    }
                    if (command.startsWith("ATAR")) {
                        if (responseStr.startsWith("OK")) {
                            //addLog("Auto Reconnect OK.");
                        } else {
                            addLog("‚ùå Auto Reconnect ERROR.");
                        }
                    }

                    /// –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–∞–ø—Ç–æ—Ä–µ
                    if (command.equals("ATI\r")) {
                        //addLog(">> " + command);
                        addLog("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä " + responseStr);
                        receivedDataPower.setText(words[0]);
                    }

                    if (command.equals("AT@SN\r")) {
                        /// –æ—Ç–≤–µ—Ç —Å–µ—Ä–∏–π–Ω–æ–º –Ω–æ–º–µ—Ä–µ –∞–¥–∞–ø—Ç–æ—Ä–∞
                        if (words[0].equals("?") || words[0].equals("OK")) {
                            addLog("‚ùå Not the original adapter");
                            receivedDataPower.setTextColor(Color.RED); /// –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
                        } else {
                            addLog("‚úÖ The original adapter" + words[0]);
                            receivedDataPower.setTextColor(Color.GREEN); /// –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
                        }
                    }

                    /// –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–æ—Ä–µ
                    if (command.equals("ATRV\r")) {
                        addLog("‚úÖ Voltage: " + responseStr);
                    }

                    /// –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ ECU
                    if (command.equals("01421\r")) {
                        String[] wordss = responseStr.split(" ");
                        if(Objects.equals(wordss[2], "41")){
                            String hex = responseStr.split(" ")[4] + responseStr.split(" ")[5];
                            addLog("‚úÖ Voltage: " + String.format("%.2fV", Integer.parseInt(hex, 16) / 1000.0));
                        } else {
                            addLog("‚ùå Voltage - N/A 0x" + wordss[2]);
                        }
                    }

                    /// Clear DTC/////////////
                    if (command.startsWith("04\r")) {
                        if (responseStr.startsWith("7E8")) {
                            String[] wordss = responseStr.split(" ");
                            if (Objects.equals(wordss[2], "44")) {
                                addLog("‚úÖ Erase DTC ... OK.");
                            } else {
                                addLog("‚ùå Erase DTC ... ERROR.");
                            }
                        } else {
                            addLog("‚ùå Erase DTC - N/A");
                        }
                    }
                    /// Read DTC/////////////
                    if (command.startsWith("03\r")) {
                        if (responseStr.startsWith("7E8")) {
                            String[] wordss = responseStr.split(" ");
                            if (wordss.length > 5) {
                                if(Objects.equals(wordss[2], "7F")){
                                    addLog("‚ùå DTC - Answer Error    " + wordss[2]);
                                } else {
                                    addLog("\uD83D\uDD39 P" + wordss[4] + wordss[5]);
                                }

                            } else {
                                addLog("‚úÖ DTC ... No Errors.");
                            }
                        } else {
                            addLog("‚ùå DTC - N/A");
                        }
                    }

                    if (command.startsWith("07\r")) {
                        if (responseStr.startsWith("7E8")) {
                            String[] wordss = responseStr.split(" ");
                            if (wordss.length > 5) {
                                if(Objects.equals(wordss[2], "7F")){
                                    addLog("‚ùå DTC - Answer Error    " + wordss[2]);
                                } else {
                                    addLog("\uD83D\uDD39 P" + wordss[4] + wordss[5]);
                                }
                            } else {
                                addLog("‚úÖ DTC ... No Errors.");
                            }
                        } else {
                            addLog("‚ùå DTC - N/A");
                        }
                    }
                    if (command.startsWith("0A\r")) {
                        if (responseStr.startsWith("7E8")) {
                            String[] wordss = responseStr.split(" ");
                            if (wordss.length > 5) {
                                if(Objects.equals(wordss[2], "7F")){
                                    addLog("‚ùå DTC - Answer Error    " + wordss[2]);
                                } else {
                                    addLog("\uD83D\uDD39 P" + wordss[4] + wordss[5]);
                                }
                            } else {
                                addLog("‚úÖ DTC ... No Errors.");
                            }
                        } else {
                            addLog("‚ùå DTC - N/A");
                        }
                    }
/// /////////////////////////////////////////////////////////////////////////////////////////////////
                    if (command.startsWith("0900\r")) {
                        if (responseStr.startsWith("7E8")) {
                            String[] wordss = responseStr.split(" ");
                            StringBuilder sVim = new StringBuilder(Arrays.toString(wordss));
                            for (int i = 6; i < wordss.length; i++) {
                                if (!wordss[i].startsWith("7E8") &&
                                        !wordss[i].startsWith("21") &&
                                        !wordss[i].startsWith("22") &&
                                        !wordss[i].startsWith("55")) {
                                    // –£–¥–∞–ª—è–µ–º –í–°–ï –≤—Ö–æ–∂–¥–µ–Ω–∏—è "7E8" –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                    String cleanedString = wordss[i].replace("7E8", "");
                                    vinBuilder.append(extractVinFromResponse(cleanedString));
                                }
                            }
                            String fullNum = vinBuilder.toString();
                            vinBuilder.setLength(0);
                            addLog("‚úÖ ECU id: " + wordss[4]);
                        } else {
                            addLog("‚ùå ECU id - N/A");
                        }
                    }


                    if (command.startsWith("0902\r")) {
                        if (responseStr.startsWith("7E8")) {
                            String[] wordss = responseStr.split(" ");
                            StringBuilder sVim = new StringBuilder(Arrays.toString(wordss));
                            for (int i = 6; i < wordss.length; i++) {
                                if (!wordss[i].startsWith("7E8") &&
                                        !wordss[i].startsWith("21") &&
                                        !wordss[i].startsWith("22") &&
                                        !wordss[i].startsWith("55")) {
                                    // –£–¥–∞–ª—è–µ–º –í–°–ï –≤—Ö–æ–∂–¥–µ–Ω–∏—è "7E8" –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                    String cleanedString = wordss[i].replace("7E8", "");
                                    vinBuilder.append(extractVinFromResponse(cleanedString));
                                }
                            }
                            String fullVin = vinBuilder.toString();
                            //receivedDataTextView.setText("VIN: " + fullVin);
                            vinBuilder.setLength(0);
                            addLog("‚úÖ VIN: " + fullVin);
                        } else {
                            addLog("‚ùå VIN - N/A  - 0902");
                        }
                    }

                    if (command.startsWith("0904\r")) {
                        if (responseStr.startsWith("7E8")) {
                            String[] wordss = responseStr.split(" ");
                            StringBuilder sVim = new StringBuilder(Arrays.toString(wordss));
                            for (int i = 6; i < wordss.length; i++) {
                                if (!wordss[i].startsWith("7E8") &&
                                        !wordss[i].startsWith("21") &&
                                        !wordss[i].startsWith("22") &&
                                        !wordss[i].startsWith("55")) {
                                    // –£–¥–∞–ª—è–µ–º –í–°–ï –≤—Ö–æ–∂–¥–µ–Ω–∏—è "7E8" –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                    String cleanedString = wordss[i].replace("7E8", "");
                                    vinBuilder.append(extractVinFromResponse(cleanedString));
                                }
                            }
                            String fullCalib = vinBuilder.toString();
                            vinBuilder.setLength(0);
                            addLog("‚úÖ Calibration ID: " + fullCalib + "\n");
                        } else {
                            addLog("‚ùå Calibration ID - N/A");
                        }
                    }

                    if (command.startsWith("0906\r")) {
                        if (responseStr.startsWith("7E8")) {
                            String[] wordss = responseStr.split(" ");
                            StringBuilder sVim = new StringBuilder(Arrays.toString(wordss));
                            for (int i = 5; i < wordss.length; i++) {
                                if (!wordss[i].startsWith("7E8") &&
                                        !wordss[i].startsWith("21") &&
                                        // !wordss[i].startsWith("55") &&
                                        !wordss[i].startsWith("55")) {
                                    // –£–¥–∞–ª—è–µ–º –í–°–ï –≤—Ö–æ–∂–¥–µ–Ω–∏—è "7E8" –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                    String cleanedString = wordss[i].replace("7E8", "");
                                    ;
                                    vinBuilder.append(cleanedString);
                                }
                            }
                            String fullReadiness = vinBuilder.toString();
                            vinBuilder.setLength(0);
                            addLog("‚úÖ Calibration Verify Num: " + fullReadiness + "\n");
                        } else {
                            addLog("‚ùå Calibration Verify Num - N/A");
                        }
                    }

                    if (command.startsWith("1A90\r")) {
                        if (responseStr.startsWith("7E8")) {
                            String[] wordss = responseStr.split(" ");
                            StringBuilder sVim = new StringBuilder(Arrays.toString(wordss));
                            for (int i = 5; i < wordss.length - 1; i++) {
                                if (!wordss[i].startsWith("7E8") &&
                                        !wordss[i].startsWith("21") &&
                                        !wordss[i].startsWith("22") &&
                                        !wordss[i].startsWith("55")) {
                                    // –£–¥–∞–ª—è–µ–º –í–°–ï –≤—Ö–æ–∂–¥–µ–Ω–∏—è "7E8" –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                    String cleanedString = wordss[i].replace("7E8", "");
                                    vinBuilder.append(extractVinFromResponse(cleanedString));
                                }
                            }
                            String fullReadiness = vinBuilder.toString();
                            vinBuilder.setLength(0);
                            addLog("‚úÖ VIN: " + fullReadiness + "\n");
                        } else {
                            addLog("‚ùå VIN - N/A");
                        }
                    }
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// –î–õ–Ø GM // Z18XER //////////////////
                    if (command.startsWith("1A97\r")) {
                        if (responseStr.startsWith("7E8")) {
                            String[] wordss = responseStr.split(" ");
                            StringBuilder sVim = new StringBuilder(Arrays.toString(wordss));
                            for (int i = 5; i < wordss.length - 1; i++) {
                                if (!wordss[i].startsWith("7E8") &&
                                        !wordss[i].startsWith("21") &&
                                        !wordss[i].startsWith("22") &&
                                        !wordss[i].startsWith("55")) {
                                    // –£–¥–∞–ª—è–µ–º –í–°–ï –≤—Ö–æ–∂–¥–µ–Ω–∏—è "7E8" –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                    String cleanedString = wordss[i].replace("7E8", "");
                                    vinBuilder.append(extractVinFromResponse(cleanedString));
                                }
                            }
                            String fullReadiness = vinBuilder.toString();
                            vinBuilder.setLength(0);
                            addLog("‚úÖ ECU: " + fullReadiness + "\n");
                        } else {
                            addLog("‚ùå ECU - N/A");
                        }
                    }
                    /// –î–õ–Ø GM // Z18XER //////////////////
                    if (command.startsWith("1A71\r")) {
                        if (responseStr.startsWith("7E8")) {
                            String[] wordss = responseStr.split(" ");
                            StringBuilder sVim = new StringBuilder(Arrays.toString(wordss));
                            for (int i = 5; i < wordss.length - 1; i++) {
                                if (!wordss[i].startsWith("7E8") &&
                                        !wordss[i].startsWith("21") &&
                                        !wordss[i].startsWith("22") &&
                                        !wordss[i].startsWith("55")) {
                                    // –£–¥–∞–ª—è–µ–º –í–°–ï –≤—Ö–æ–∂–¥–µ–Ω–∏—è "7E8" –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                    String cleanedString = wordss[i].replace("7E8", "");
                                    vinBuilder.append(extractVinFromResponse(cleanedString));
                                }
                            }
                            String fullReadiness = vinBuilder.toString();
                            vinBuilder.setLength(0);
                            addLog("‚úÖ ECU: " + fullReadiness + "\n");
                        } else {
                            addLog("‚ùå ECU - N/A");
                        }
                    }
                    /// –î–õ–Ø GM // odometer //////////////////
                    if (command.startsWith("AA041A\r")) {
                        if (responseStr.startsWith("5E8")) {
                            String[] wordss = responseStr.split(" ");
                            StringBuilder sVim = new StringBuilder(Arrays.toString(wordss));
                            for (int i = 0; i < wordss.length - 1; i++) {
                                if (!wordss[i].startsWith("5E8") &&
                                        !wordss[i].startsWith("21") &&
                                        !wordss[i].startsWith("22") &&
                                        !wordss[i].startsWith("55")) {
                                    // –£–¥–∞–ª—è–µ–º –í–°–ï –≤—Ö–æ–∂–¥–µ–Ω–∏—è "7E8" –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                    String cleanedString = wordss[i].replace("5E8", "");
                                    vinBuilder.append(extractVinFromResponse(cleanedString));
                                }
                            }
                            String fullReadiness = vinBuilder.toString();
                            vinBuilder.setLength(0);
                            // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, wordss —Å–æ–¥–µ—Ä–∂–∏—Ç HEX –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
                            int km = (Integer.parseInt(wordss[2], 16) << 24) |
                                    (Integer.parseInt(wordss[3], 16) << 16) |
                                    (Integer.parseInt(wordss[4], 16) << 8) |
                                    Integer.parseInt(wordss[5], 16);
                            addLog("‚úÖ ODO: " + km  + " Km.\n");
                        } else {
                            addLog("‚ùå ODO - N/A");
                        }
                    }
/// ///////////////////////////////////////////////////////////////////////////////////////////////////
                    String[] pid;
                    if (command.startsWith("0100\r")) {
                        if (responseStr.startsWith("SEARCHING...\r7E8")) {
                            btnIdenECU.setCompoundDrawableTintList(ColorStateList.valueOf(Color.YELLOW));
                            btnIdenECU.setTextColor(Color.WHITE);
                            btnDataECU.setTextColor(Color.WHITE);
                            btnReadDTC.setTextColor(Color.WHITE);
                            btnClearDTC.setTextColor(Color.WHITE);
                            filterResponse(responseStr);
                            pid = responseStr.split(" ");

                            if (!Objects.equals(pid[2], "41")) {
                                addLog("‚ùå ECU No Connect 1");
                                btnIdenECU.setTextColor(Color.GRAY);
                                btnDataECU.setTextColor(Color.GRAY);
                                btnReadDTC.setTextColor(Color.GRAY);
                                btnClearDTC.setTextColor(Color.GRAY);
                                btnIdenECU.setCompoundDrawableTintList(ColorStateList.valueOf(Color.GRAY));
                                return;
                            }
                            addLog("‚úÖ ECU Connect OK.");
                            // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö PID
                            if (pid.length >= 8) {
                                analyzeSupportedPIDs(pid[4], pid[5], pid[6], pid[7]);
                            } else {
                                addLog("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ PID");
                            }
                        } else if (responseStr.startsWith("7E8")) {
                            pid = responseStr.split(" ");
                            if (!Objects.equals(pid[2], "41")) {
                                addLog("‚ùå ECU No Connect");
                                btnIdenECU.setTextColor(Color.GRAY);
                                btnDataECU.setTextColor(Color.GRAY);
                                btnReadDTC.setTextColor(Color.GRAY);
                                btnClearDTC.setTextColor(Color.GRAY);
                                btnIdenECU.setCompoundDrawableTintList(ColorStateList.valueOf(Color.GRAY));
                                return;
                            }
                            addLog("‚úÖ ECU Connect OK.");
                            String[] wordss = responseStr.split(" ");
                            addLog("‚úÖ ECU address/CAN id: " + wordss[0] + "\n");
                            btnIdenECU.setTextColor(Color.WHITE);
                            btnDataECU.setTextColor(Color.WHITE);
                            btnReadDTC.setTextColor(Color.WHITE);
                            btnClearDTC.setTextColor(Color.WHITE);
                            filterResponse(responseStr);
                            //receivedDataTextView.setText(responseStr);
                            //pid = responseStr.split(" ");
                            //receivedDataTextView.setText(pid[0]);
                        } else {
                            addLog("‚ùå ECU No Connect 2");
                            btnIdenECU.setTextColor(Color.GRAY);
                            btnDataECU.setTextColor(Color.GRAY);
                            btnReadDTC.setTextColor(Color.GRAY);
                            btnClearDTC.setTextColor(Color.GRAY);
                            btnIdenECU.setCompoundDrawableTintList(ColorStateList.valueOf(Color.GRAY));
                            return;
                        }

                    }

                    if (command.startsWith("ATDP\r")) {
                        if (responseStr.startsWith("AU")) {
                            String[] wordss = responseStr.split(" ");
                            StringBuilder sVim = new StringBuilder(Arrays.toString(wordss));
                            for (int i = 1; i < wordss.length; i++) {
                                if (!wordss[i].startsWith("7E8") &&
                                        !wordss[i].startsWith("21") &&
                                        !wordss[i].startsWith("22") &&
                                        !wordss[i].startsWith("55")) {
                                    // –£–¥–∞–ª—è–µ–º –í–°–ï –≤—Ö–æ–∂–¥–µ–Ω–∏—è "7E8" –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                    String cleanedString = wordss[i].replace("7E8", "");
                                    vinBuilder.append(extractVinFromResponse(cleanedString));
                                }
                            }
                            String fullVin = vinBuilder.toString();
                            vinBuilder.setLength(0);
                            addLog("‚úÖ Protocol: " + fullVin);
                        } else {
                            addLog("‚ùå Protocol - N/A  - 0902");
                        }
                    }

                    if (callback != null) {
                        try {
                            callback.onResponse(responseStr);
                        } catch (InterruptedException e) {
                            throw new RuntimeException(e);
                        }
                    }
                });


            } catch (IOException | InterruptedException e) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ç–∞–∫–∂–µ —á–µ—Ä–µ–∑ handler
                handler.post(() -> showToast("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage()));
            }
        }).start();
    }


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö PID
    private void analyzeSupportedPIDs(String byte1Hex, String byte2Hex, String byte3Hex, String byte4Hex) {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HEX –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            String binaryString1 = String.format("%8s", Integer.toBinaryString(Integer.parseInt(byte1Hex, 16))).replace(' ', '0');
            String binaryString2 = String.format("%8s", Integer.toBinaryString(Integer.parseInt(byte2Hex, 16))).replace(' ', '0');
            String binaryString3 = String.format("%8s", Integer.toBinaryString(Integer.parseInt(byte3Hex, 16))).replace(' ', '0');
            String binaryString4 = String.format("%8s", Integer.toBinaryString(Integer.parseInt(byte4Hex, 16))).replace(' ', '0');

//            addLog(" >1>" + byte1Hex + "> " + binaryString1 +
//                    " \n >2>" + byte2Hex + "> " + binaryString2 +
//                    " \n >3>" + byte3Hex + "> " + binaryString3 +
//                    " \n >4>" + byte4Hex + "> " + binaryString4);

            // –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö PID
            StringBuilder supportedPids = new StringBuilder();
            supportedPids.append("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ PID:\n");

            // –ë–∞–π—Ç 1: PIDs 01-08
            supportedPids.append("‚úÖ –ë–∞–π—Ç 1 (").append(byte1Hex).append(") - PIDs 01-08:\n");
            analyzeBytePIDs(binaryString1, 1, supportedPids);

            // –ë–∞–π—Ç 2: PIDs 09-16
            supportedPids.append("\n‚úÖ –ë–∞–π—Ç 2 (").append(byte2Hex).append(") - PIDs 09-16:\n");
            analyzeBytePIDs(binaryString2, 9, supportedPids);

            // –ë–∞–π—Ç 3: PIDs 17-1F (17-31)
            supportedPids.append("\n‚úÖ –ë–∞–π—Ç 3 (").append(byte3Hex).append(") - PIDs 17-1F:\n");
            analyzeBytePIDs(binaryString3, 17, supportedPids);

            // –ë–∞–π—Ç 4: PIDs 20-27
            supportedPids.append("\n‚úÖ –ë–∞–π—Ç 4 (").append(byte4Hex).append(") - PIDs 20-27:\n");
            analyzeBytePIDs(binaryString4, 20, supportedPids);

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            addLog(supportedPids.toString());

        } catch (NumberFormatException e) {
            addLog("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è HEX –¥–∞–Ω–Ω—ã—Ö: " + byte1Hex + " " + byte2Hex + " " + byte3Hex + " " + byte4Hex);
            e.printStackTrace();
        }
    }


    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–π—Ç–∞
    private void analyzeBytePIDs(String binaryString, int startPid, StringBuilder result) {
        // –ò–¥–µ–º –ø–æ –±–∏—Ç–∞–º —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ (–º–ª–∞–¥—à–∏–π –±–∏—Ç –ø–µ—Ä–≤—ã–π)
        for (int i = 7; i >= 0; i--) {
            char bit = binaryString.charAt(7 - i); // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –±–∏—Ç–æ–≤
            int currentPid = startPid + i;

            if (bit == '1') {
                result.append("\uD83D\uDD39 PID ").append(String.format("%02X", currentPid))
                        .append(" (").append(currentPid).append(") - ")
                        .append(getPidDescription(currentPid)).append("\n");
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è PID
    private String getPidDescription(int pid) {
        switch (pid) {
            case 1:
                return "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞";
            case 2:
                return "Freeze DTC (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫)";
            case 3:
                return "–¢–æ–ø–ª–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞";
            case 4:
                return "–†–∞—Å—á—ë—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞";
            case 5:
                return "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏";
            case 6:
                return "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–æ–ø–ª–∏–≤–∞";
            case 7:
                return "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–æ–ø–ª–∏–≤–∞";
            case 8:
                return "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –¥—Ä–æ—Å—Å–µ–ª—å–Ω–æ–π –∑–∞—Å–ª–æ–Ω–∫–∏";
            case 9:
                return "–î–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞";
            case 10:
                return "–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–µ";
            case 11:
                return "–û–±–æ—Ä–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è (RPM)";
            case 12:
                return "–°–∫–æ—Ä–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è";
            case 13:
                return "–£–≥–æ–ª –æ–ø–µ—Ä–µ–∂–µ–Ω–∏—è –∑–∞–∂–∏–≥–∞–Ω–∏—è";
            case 14:
                return "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–ø—É—Å–∫–Ω–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞";
            case 15:
                return "–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞";
            case 16:
                return "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ–¥–∞–ª–∏ –≥–∞–∑–∞";
            case 17:
                return "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∫–∏—Å–ª–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ (–±–∞–Ω–∫ 1)";
            case 18:
                return "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∫–∏—Å–ª–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ (–±–∞–Ω–∫ 2)";
            case 19:
                return "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∫–∏—Å–ª–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ (–±–∞–Ω–∫ 3)";
            case 20:
                return "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∫–∏—Å–ª–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ (–±–∞–Ω–∫ 4)";
            case 21:
                return "–ü—Ä–æ–±–µ–≥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞ –æ—à–∏–±–æ–∫";
            case 22:
                return "–î–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Ä–∞–º–ø–µ";
            case 23:
                return "–î–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ";
            case 24:
                return "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö/—Ç–æ–ø–ª–∏–≤–æ (–±–∞–Ω–∫ 1)";
            case 25:
                return "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö/—Ç–æ–ø–ª–∏–≤–æ (–±–∞–Ω–∫ 2)";
            case 26:
                return "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö/—Ç–æ–ø–ª–∏–≤–æ (–±–∞–Ω–∫ 3)";
            case 27:
                return "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö/—Ç–æ–ø–ª–∏–≤–æ (–±–∞–Ω–∫ 4)";
            case 28:
                return "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞";
            case 29:
                return "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (–±–∞–Ω–∫ 2)";
            case 30:
                return "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è";
            case 31:
                return "–î–∏—Å—Ç–∞–Ω—Ü–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞ –æ—à–∏–±–æ–∫";
            default:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä";
        }
    }


    // –†–∞–∑–±–æ—Ä –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ECU
    private void parseECUInfo(String ecuResponse) {
        // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É 0902
        if (ecuResponse.contains(":")) {
            String[] parts = ecuResponse.split(":");
            if (parts.length > 1) {
                String ecuId = parts[1].trim()
                        .replaceAll(" ", "")
                        .replaceAll("\r", "")
                        .replaceAll("\n", "");
                if (!ecuId.isEmpty()) {
                    showToast("–ù–∞–π–¥–µ–Ω ECU ID: " + ecuId);
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                }
            }
        }
    }

    private String hexToAscii(String hexStr) {
        StringBuilder output = new StringBuilder();
        for (int i = 0; i < hexStr.length(); i += 2) {
            String str = hexStr.substring(i, i + 2);
            output.append((char) Integer.parseInt(str, 16));
        }
        return output.toString();
    }

    private void receiveData() {
        byte[] buffer = new byte[2048]; // –ë—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        int bytes; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –±–∞–π—Ç–æ–≤

        while (true) {
            try {
                bytes = inputStream.read(buffer); // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                String receivedMessage = new String(buffer, 0, bytes); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
                //runOnUiThread(() -> receivedDataTextView.setText(receivedMessage)); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                /// ////////////////////////////////////////////////////////////////////////////////
                if (bytes == -1) {
                    // –ï—Å–ª–∏ bytes —Ä–∞–≤–µ–Ω -1, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü –ø–æ—Ç–æ–∫–∞
                    Log.e("Bluetooth", "–ö–æ–Ω–µ—Ü –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö");
                    break;
                }
            } catch (Exception e) {
                Log.e("Bluetooth", "–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö", e);
                break;
            }
        }
    }

    private void addLog(String message) {
        logMessages.add(message);
        logAdapter.notifyDataSetChanged();
        logListView.smoothScrollToPosition(logMessages.size() - 1);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        try {
            if (bluetoothSocket != null) bluetoothSocket.close();
            if (outputStream != null) outputStream.close();
            if (inputStream != null) inputStream.close();
        } catch (IOException e) {
            Log.e("ELM327", "–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", e);
        }
    }
}














